24,40d23
< /*
<  * This file implements a simple OpenVPN plugin module which
<  * will test deferred authentication.
<  *
<  * Will run on Windows or *nix.
<  *
<  * Sample usage:
<  *
<  * setenv test_deferred_auth 20
<  * plugin plugin/defer/simple.so
<  *
<  * This will enable deferred authentication to occur 20
<  * seconds after the normal TLS authentication process.
<  *
<  * See the README file for build instructions.
<  */
< 
45d27
< #include <fcntl.h>
73d54
<     int test_deferred_auth;
79,132d59
< /*
<  * Given an environmental variable name, search
<  * the envp array for its value, returning it
<  * if found or NULL otherwise.
<  */
< static const char *
< get_env(const char *name, const char *envp[])
< {
<     if (envp)
<     {
<         int i;
<         const int namelen = strlen(name);
<         for (i = 0; envp[i]; ++i)
<         {
<             if (!strncmp(envp[i], name, namelen))
<             {
<                 const char *cp = envp[i] + namelen;
<                 if (*cp == '=')
<                 {
<                     return cp + 1;
<                 }
<             }
<         }
<     }
<     return NULL;
< }
< 
< /* used for safe printf of possible NULL strings */
< static const char *
< np(const char *str)
< {
<     if (str)
<     {
<         return str;
<     }
<     else
<     {
<         return "[NULL]";
<     }
< }
< 
< static int
< atoi_null0(const char *str)
< {
<     if (str)
<     {
<         return atoi(str);
<     }
<     else
<     {
<         return 0;
<     }
< }
< 
169,171d95
<     context->test_deferred_auth = atoi_null0(get_env("test_deferred_auth", envp));
<     plugin_log(PLOG_NOTE, MODULE, "TEST_DEFERRED_AUTH %d", context->test_deferred_auth);
< 
195,217d118
<     if (!context->test_deferred_auth)
<     {
<         return OPENVPN_PLUGIN_FUNC_SUCCESS;
<     }
< 
<     /* get username/password from envp string array */
<     const char *username = get_env("username", envp);
<     const char *password = get_env("password", envp);
< 
<     /* get auth_control_file filename from envp string array*/
<     const char *auth_control_file = get_env("auth_control_file", envp);
< 
<     plugin_log(PLOG_NOTE, MODULE, "DEFER u='%s' p='%s' acf='%s'",
<                np(username),
<                np(password),
<                np(auth_control_file));
< 
<     /* Authenticate asynchronously in n seconds */
<     if (!auth_control_file)
<     {
<         return OPENVPN_PLUGIN_FUNC_ERROR;
<     }
< 
250,252c151
<      *  - never call "return" now (would mess up openvpn)
<      *  - return status is communicated by file
<      *  - then exit()
---
>      * FIXME - defer'ed goes here
256,273d154
<     plugin_log(PLOG_NOTE, MODULE, "in async/deferred handler, sleep(%d)", context->test_deferred_auth);
<     sleep(context->test_deferred_auth);
< 
<     /* now signal success state to openvpn */
<     int fd = open(auth_control_file, O_WRONLY);
<     if (fd < 0)
<     {
<         plugin_log(PLOG_ERR|PLOG_ERRNO, MODULE, "open('%s') failed", auth_control_file);
<         exit(1);
<     }
< 
<     plugin_log(PLOG_NOTE, MODULE, "auth_user_pass_verify: done" );
< 
<     if (write(fd, "1", 1) != 1)
<     {
<         plugin_log(PLOG_ERR|PLOG_ERRNO, MODULE, "write to '%s' failed", auth_control_file );
<     }
<     close(fd);
